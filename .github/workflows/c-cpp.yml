
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]


jobs:
  build:
  runs-on: self-hosted
  steps:
  - checkout: self
    clean: true
    submodules: recursive
  - bash: |
      source ./ci/install_dependencies.sh
      # Pass modified PATH to following steps:
      echo "##vso[task.setvariable variable=PATH]$PATH"
    displayName: Install Dependencies
  - bash: rm -rf libs/quazip
    displayName: Remove bundled quazip lib
    condition: and(succeeded(), contains(variables['UNBUNDLE'], 'quazip'))
  - bash: rm -rf libs/polyclipping
    displayName: Remove bundled polyclipping lib
    condition: and(succeeded(), contains(variables['UNBUNDLE'], 'polyclipping'))
  - bash: ./ci/build_librepcb.sh
    displayName: Build LibrePCB
  - bash: ./ci/build_linux_appimage.sh
    displayName: Build AppImage
    condition: and(succeeded(), eq(variables['DEPLOY'], 'true'))
  - bash: ./ci/build_linux_archive.sh
    displayName: Build Archive
    condition: and(succeeded(), eq(variables['DEPLOY'], 'true'))
  - bash: ./ci/build_installer.sh
    displayName: Build Installer
    condition: and(succeeded(), eq(variables['DEPLOY'], 'true'))
  - bash: xvfb-run -a ./build/output/qztest
    displayName: Run QuaZip Unittests
    condition: and(succeeded(), not(contains(variables['UNBUNDLE'], 'quazip')))
  - bash: xvfb-run -a ./build/output/librepcb-unittests
    displayName: Run LibrePCB Unittests
  - bash: xvfb-run -a --server-args="-screen 0 1024x768x24" pytest -v --librepcb-executable="build/install/opt/bin/librepcb-cli" ./tests/cli
    displayName: Run LibrePCB-CLI Functional Tests
  - bash: xvfb-run -a --server-args="-screen 0 1024x768x24" pytest -v --librepcb-executable="build/install/opt/bin/librepcb" ./tests/funq
    displayName: Run LibrePCB Functional Tests
  - bash: ./ci/upload_artifacts.sh
    displayName: Upload Artifacts
    condition: and(succeeded(), eq(variables['DEPLOY'], 'true'), ne(variables['Build.Reason'], 'PullRequest'))
    env:
      UPLOAD_URL: $(ARTIFACTS_UPLOAD_URL)
      UPLOAD_USER: $(ARTIFACTS_UPLOAD_USER)
      UPLOAD_PASS: $(ARTIFACTS_UPLOAD_PASS)
      UPLOAD_SIGN_KEY: $(ARTIFACTS_UPLOAD_SIGN_KEY)
